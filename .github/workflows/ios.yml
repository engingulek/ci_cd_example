name: iOS starter workflow

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Navigate to MyiOS directory
        run: cd MyiOS  # MyiOS klasörüne geçiş yapıyoruz

      - name: Check if .xcodeproj or .xcworkspace exists
        run: |
          if [ ! -d "*.xcodeproj" ] && [ ! -d "*.xcworkspace" ]; then
            echo "No .xcodeproj or .xcworkspace file found!"
            exit 1
          fi

      - name: Set Default Scheme
        run: |
          if [ -d "*.xcworkspace" ]; then
            file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
            filetype_parameter="workspace"
          elif [ -d "*.xcodeproj" ]; then
            file_to_build="`ls -A | grep -i \\.xcodeproj\$`"
            filetype_parameter="project"
          else
            echo "No valid project or workspace found!"
            exit 1
          fi
          scheme_list=$(xcodebuild -list -json -workspace "$file_to_build" | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat > default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ "$scheme" = "default" ]; then scheme=$(cat default); fi
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ "$scheme" = "default" ]; then scheme=$(cat default); fi
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
